// Copyright 2023, NVIDIA CORPORATION & AFFILIATES. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//  * Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
//  * Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//  * Neither the name of NVIDIA CORPORATION nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
// OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// @generated by protoc-gen-es v2.2.2 with parameter "target=ts"
// @generated from file health.proto (package grpc.health.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from '@bufbuild/protobuf/codegenv1'
import { enumDesc, fileDesc, messageDesc, serviceDesc } from '@bufbuild/protobuf/codegenv1'
import type { Message } from '@bufbuild/protobuf'

/**
 * Describes the file health.proto.
 */
export const file_health: GenFile =
    /*@__PURE__*/
    fileDesc(
        'CgxoZWFsdGgucHJvdG8SDmdycGMuaGVhbHRoLnYxIiUKEkhlYWx0aENoZWNrUmVxdWVzdBIPCgdzZXJ2aWNlGAEgASgJIqkBChNIZWFsdGhDaGVja1Jlc3BvbnNlEkEKBnN0YXR1cxgBIAEoDjIxLmdycGMuaGVhbHRoLnYxLkhlYWx0aENoZWNrUmVzcG9uc2UuU2VydmluZ1N0YXR1cyJPCg1TZXJ2aW5nU3RhdHVzEgsKB1VOS05PV04QABILCgdTRVJWSU5HEAESDwoLTk9UX1NFUlZJTkcQAhITCg9TRVJWSUNFX1VOS05PV04QAzJaCgZIZWFsdGgSUAoFQ2hlY2sSIi5ncnBjLmhlYWx0aC52MS5IZWFsdGhDaGVja1JlcXVlc3QaIy5ncnBjLmhlYWx0aC52MS5IZWFsdGhDaGVja1Jlc3BvbnNlYgZwcm90bzM'
    )

/**
 *
 * .. cpp:var:: message HealthCheckRequest
 *
 *    Request message for HealthCheck
 *
 *
 * @generated from message grpc.health.v1.HealthCheckRequest
 */
export type HealthCheckRequest = Message<'grpc.health.v1.HealthCheckRequest'> & {
    /**
     * @generated from field: string service = 1;
     */
    service: string
}

/**
 * Describes the message grpc.health.v1.HealthCheckRequest.
 * Use `create(HealthCheckRequestSchema)` to create a new message.
 */
export const HealthCheckRequestSchema: GenMessage<HealthCheckRequest> =
    /*@__PURE__*/
    messageDesc(file_health, 0)

/**
 *
 * .. cpp:var:: message HealthCheckResponse
 *
 *    Response message for HealthCheck
 *
 *
 * @generated from message grpc.health.v1.HealthCheckResponse
 */
export type HealthCheckResponse = Message<'grpc.health.v1.HealthCheckResponse'> & {
    /**
     * @generated from field: grpc.health.v1.HealthCheckResponse.ServingStatus status = 1;
     */
    status: HealthCheckResponse_ServingStatus
}

/**
 * Describes the message grpc.health.v1.HealthCheckResponse.
 * Use `create(HealthCheckResponseSchema)` to create a new message.
 */
export const HealthCheckResponseSchema: GenMessage<HealthCheckResponse> =
    /*@__PURE__*/
    messageDesc(file_health, 1)

/**
 *
 * .. cpp:enum:: ServingStatus
 *
 *    Statuses supported by GRPC's health check.
 *
 *
 * @generated from enum grpc.health.v1.HealthCheckResponse.ServingStatus
 */
export enum HealthCheckResponse_ServingStatus {
    /**
     * @generated from enum value: UNKNOWN = 0;
     */
    UNKNOWN = 0,

    /**
     * @generated from enum value: SERVING = 1;
     */
    SERVING = 1,

    /**
     * @generated from enum value: NOT_SERVING = 2;
     */
    NOT_SERVING = 2,

    /**
     * @generated from enum value: SERVICE_UNKNOWN = 3;
     */
    SERVICE_UNKNOWN = 3
}

/**
 * Describes the enum grpc.health.v1.HealthCheckResponse.ServingStatus.
 */
export const HealthCheckResponse_ServingStatusSchema: GenEnum<HealthCheckResponse_ServingStatus> =
    /*@__PURE__*/
    enumDesc(file_health, 1, 0)

/**
 *
 * .. cpp:var:: service Health
 *
 *    Health service for GRPC endpoints.
 *
 *
 * @generated from service grpc.health.v1.Health
 */
export const Health: GenService<{
    /**
     *   .. cpp:var:: rpc Check(HealthCheckRequest) returns
     *        (HealthCheckResponse)
     *
     *      Get serving status of the inference server.
     *
     *
     * @generated from rpc grpc.health.v1.Health.Check
     */
    check: {
        methodKind: 'unary'
        input: typeof HealthCheckRequestSchema
        output: typeof HealthCheckResponseSchema
    }
}> = /*@__PURE__*/ serviceDesc(file_health, 0)
